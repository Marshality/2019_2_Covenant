// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "2019_2_Covenant/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindLike mocks base method
func (m *MockRepository) FindLike(name string, count uint64) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLike", name, count)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLike indicates an expected call of FindLike
func (mr *MockRepositoryMockRecorder) FindLike(name, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLike", reflect.TypeOf((*MockRepository)(nil).FindLike), name, count)
}
