// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "2019_2_Covenant/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// FetchPopular mocks base method
func (m *MockUsecase) FetchPopular(count, offset uint64) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPopular", count, offset)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPopular indicates an expected call of FetchPopular
func (mr *MockUsecaseMockRecorder) FetchPopular(count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPopular", reflect.TypeOf((*MockUsecase)(nil).FetchPopular), count, offset)
}

// FetchFavourites mocks base method
func (m *MockUsecase) FetchFavourites(userID, count, offset uint64) ([]*models.Track, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFavourites", userID, count, offset)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchFavourites indicates an expected call of FetchFavourites
func (mr *MockUsecaseMockRecorder) FetchFavourites(userID, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFavourites", reflect.TypeOf((*MockUsecase)(nil).FetchFavourites), userID, count, offset)
}

// StoreFavourite mocks base method
func (m *MockUsecase) StoreFavourite(userID, trackID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFavourite", userID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFavourite indicates an expected call of StoreFavourite
func (mr *MockUsecaseMockRecorder) StoreFavourite(userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFavourite", reflect.TypeOf((*MockUsecase)(nil).StoreFavourite), userID, trackID)
}

// RemoveFavourite mocks base method
func (m *MockUsecase) RemoveFavourite(userID, trackID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavourite", userID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavourite indicates an expected call of RemoveFavourite
func (mr *MockUsecaseMockRecorder) RemoveFavourite(userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavourite", reflect.TypeOf((*MockUsecase)(nil).RemoveFavourite), userID, trackID)
}
