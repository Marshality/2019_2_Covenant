// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file_service.proto

package file_processor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chunk struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c78f9f6046a483e, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "repository.Chunk")
}

func init() { proto.RegisterFile("file_service.proto", fileDescriptor_5c78f9f6046a483e) }

var fileDescriptor_5c78f9f6046a483e = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xcb, 0xcc, 0x49,
	0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x2a, 0x4a, 0x2d, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0x2f, 0xaa, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x24, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x14,
	0x2a, 0x49, 0x73, 0xb1, 0x3a, 0x67, 0x94, 0xe6, 0x65, 0x0b, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96,
	0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x46, 0x8d, 0x8c, 0x5c, 0xac, 0x6e,
	0x99, 0x39, 0xa9, 0xc5, 0x42, 0xd6, 0x5c, 0x3c, 0x01, 0x45, 0xf9, 0xc9, 0xa9, 0xc5, 0xc5, 0x8e,
	0xa5, 0x29, 0x99, 0xf9, 0x42, 0x82, 0x7a, 0x08, 0x0b, 0xf4, 0xc0, 0x06, 0x48, 0x89, 0xe9, 0x41,
	0xec, 0xd1, 0x83, 0xd9, 0xa3, 0xe7, 0x0a, 0xb2, 0x47, 0x83, 0x11, 0x49, 0xb3, 0x67, 0x6e, 0x62,
	0x7a, 0x2a, 0x49, 0x9a, 0x93, 0xd8, 0xc0, 0x22, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x0f, 0x74, 0xaa, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesClient interface {
	ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (Files_ProcessAudioClient, error)
	ProcessImage(ctx context.Context, opts ...grpc.CallOption) (Files_ProcessImageClient, error)
}

type filesClient struct {
	cc *grpc.ClientConn
}

func NewFilesClient(cc *grpc.ClientConn) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (Files_ProcessAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[0], "/repository.Files/ProcessAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesProcessAudioClient{stream}
	return x, nil
}

type Files_ProcessAudioClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type filesProcessAudioClient struct {
	grpc.ClientStream
}

func (x *filesProcessAudioClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesProcessAudioClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) ProcessImage(ctx context.Context, opts ...grpc.CallOption) (Files_ProcessImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[1], "/repository.Files/ProcessImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesProcessImageClient{stream}
	return x, nil
}

type Files_ProcessImageClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type filesProcessImageClient struct {
	grpc.ClientStream
}

func (x *filesProcessImageClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesProcessImageClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesServer is the server API for Files service.
type FilesServer interface {
	ProcessAudio(Files_ProcessAudioServer) error
	ProcessImage(Files_ProcessImageServer) error
}

// UnimplementedFilesServer can be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (*UnimplementedFilesServer) ProcessAudio(srv Files_ProcessAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessAudio not implemented")
}
func (*UnimplementedFilesServer) ProcessImage(srv Files_ProcessImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessImage not implemented")
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_ProcessAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).ProcessAudio(&filesProcessAudioServer{stream})
}

type Files_ProcessAudioServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type filesProcessAudioServer struct {
	grpc.ServerStream
}

func (x *filesProcessAudioServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesProcessAudioServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Files_ProcessImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).ProcessImage(&filesProcessImageServer{stream})
}

type Files_ProcessImageServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type filesProcessImageServer struct {
	grpc.ServerStream
}

func (x *filesProcessImageServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesProcessImageServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Files",
	HandlerType: (*FilesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessAudio",
			Handler:       _Files_ProcessAudio_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessImage",
			Handler:       _Files_ProcessImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file_service.proto",
}
